#!/usr/bin/env python3

# This script takes whatever URL is in the clipboard and displays it on screen as a QR code on screen
# If it is a path to a local file, it spins up a web server for 20 seconds that serves the file on the local LAN
# Useful for copying stuff from computer to phone

# Tested on Ubuntu 24.04
# I have this programmed as <Super>+Q in Settings -> Keyboard -> Keyboard Shortcuts -> Custom Shortcuts

# Requirements:
# $ sudo apt install python3-pil python3-pyperclip python3-tk python3-qrcode

import pyperclip
import time
import qrcode
import threading
from tkinter import Toplevel, Tk, Label, PhotoImage
import http.server
import socketserver
import socket
import threading
import os
import random
import string
from urllib.parse import urlparse, parse_qs
import PIL.Image

def get_qr(url:str, size:int = 960):
    """
    input: url as str
    output: PIL.Image of QR
    """
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=5,
    )
    qr.add_data(url)
    img = qr.make_image(back_color=(255,255,255), fill_color=(0,0,0))
    img = img.resize((size, size))
    return img

def show_image(img: PIL.Image):
    img.save("/tmp/clip2qr.png")

    win = Tk()
    win.attributes('-alpha', 0.8)
    win.iconify()
    screen_width = win.winfo_screenwidth()
    screen_height = win.winfo_screenheight()
    
    window = Toplevel(win)
    x = screen_width // 2 - img.size[0]// 2
    y = screen_height // 2 - img.size[1] // 2
    window.geometry(f"{img.size[0]}x{img.size[1]}+{x}+{y}")
    window.overrideredirect(1)
    
    photo = PhotoImage(file="/tmp/clip2qr.png")
    label = Label(window, image=photo)
    label.focus_set()
    label.bind("<Key>", lambda event: (win.destroy(), server.stop() if server is not None else None))
    label.bind("<Button-1>", lambda event: (win.destroy(), server.stop() if server is not None else None))
    label.pack()

    win.after(30000, lambda: (win.destroy(), stop_server()))
    win.mainloop()

server = None

class FileServer(object):
    def __init__(self, file_path, port = 7777):
        self.directory, self.filename = file_path.rsplit("/", 1)
        self.password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
        self.ip =(([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")] or [[(s.connect(("8.8.8.8", 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) + ["no IP found"])[0]
        self.url = f"http://{self.ip}:7777/{self.filename}?password={self.password}"
        self.port = port
        self.httpd = None

    def _get_request_handler(self, directory, filename, password):
        class RequestHandler(http.server.SimpleHTTPRequestHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, directory=directory, **kwargs)
    
            def do_GET(self):
                parsed_path = urlparse(self.path)
                query_params = parse_qs(parsed_path.query)
                if parsed_path.path == f'/{filename}' and query_params.get('password', [None])[0] == password:
                    super().do_GET()
                else:
                    self.send_error(404, "File Not Found")
        return RequestHandler

    def start(self):
        handler = self._get_request_handler(self.directory, self.filename, self.password)
        socketserver.TCPServer.allow_reuse_address = True
        self.httpd = socketserver.TCPServer(("", self.port), handler)
        print(f"Serving {self.filename} at {self.url}")
        self.httpd.serve_forever()

    def stop(self):
        if self.httpd:
            print("Stopping server...")
            self.httpd.shutdown()

def main():
    global server

    clipboard_contents = pyperclip.paste()
    if clipboard_contents.startswith("/") and os.path.exists(clipboard_contents):
        # it's a file, serve it
        server = FileServer(clipboard_contents)
        threading.Thread(target=server.start).start()
        show_image(get_qr(server.url))

    elif clipboard_contents.startswith("http://") or clipboard_contents.startswith("https://"):
        # it's an URL
        show_image(get_qr(clipboard_contents))

    else:
        # no idea what it is, dump it to a .txt file and serve it
        with open("/tmp/clip2qr.txt", "w") as f:
            f.write(clipboard_contents)
        server = FileServer("/tmp/clip2qr.txt")
        threading.Thread(target=server.start).start()
        show_image(get_qr(server.url))

if __name__ == "__main__":
    main()


